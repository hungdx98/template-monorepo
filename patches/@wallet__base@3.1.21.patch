diff --git a/src/core/core.ts b/src/core/core.ts
index 29ca8941092528bda3a4aa461ad63eb134a48759..ac2e8de9bbad5ba1f7d48e839a4219fa447fc38a 100644
--- a/src/core/core.ts
+++ b/src/core/core.ts
@@ -1,3 +1,4 @@
+//@ts-nocheck
 import {
   CHAIN_DATA,
   CHAIN_TYPE,
@@ -70,23 +71,21 @@ import {
   TransferError
 } from './error/engineError'
 import { Logger, convertCheckSUM, findTrade } from '@wallet/utils'
-// @ts-expect-error
 import mapSeries from 'async/mapSeries'
-import {HistoryServices, IHistoryResponse} from '@coin98/history'
+// import {HistoryServices, IHistoryResponse} from '@coin98/history'
 
 export class BaseWallet {
   public readonly engines: Engine[]
   private contentId?: number
   private collectionFetchId?: number
   private readonly config: EngineConfiguration
-  private readonly historyEngine?: HistoryServices
+  // private readonly historyEngine?: HistoryServices
 
   constructor (config: EngineConfiguration, engines: Engine[]) {
     config.logger = new Logger(config.enableLogger)
-    // @ts-expect-error
     this.engines = engines.map((EngineItem) => new EngineItem(config))
     this.config = config
-    this.historyEngine = new HistoryServices()
+    // this.historyEngine = new HistoryServices()
   }
 
   updateConfig (params: BaseWalletUpdateConfig): void {
@@ -507,9 +506,9 @@ export class BaseWallet {
     return await engine.faucet(_params)
   }
 
-  async history<T extends BaseHistory> (_params: T): Promise<IHistoryResponse> {
-    const history = await this.historyEngine?.getHistory(_params)
-    return history as IHistoryResponse
+  async history<T extends BaseHistory> (_params: T): Promise<any> {
+    // const history = await this.historyEngine?.getHistory(_params)
+    // return history as IHistoryResponse
   }
 
   // async getMaxBalanceBTCTransfer (_params: BaseTransferMaxBTCBalance): Promise<string> {
diff --git a/src/core/integration.ts b/src/core/integration.ts
index 0a06c7641e83ef6accae3c6da35878dc05043bff..e73ee410be88f1640af9b8099326a3d07e9a0951 100644
--- a/src/core/integration.ts
+++ b/src/core/integration.ts
@@ -6,7 +6,7 @@ export class BaseIntegration {
   engines: IntegrationEngine[]
   constructor (network: Record<string, Chain | any>, engines: Array<{ type: IIntegrationKey, Engine: IntegrationEngine }>) {
     this.network = network
-    // @ts-expect-error
+    //@ts-ignore
     this.engines = engines.map(({ type, Engine }) => new Engine(network[type]))
   }
 
